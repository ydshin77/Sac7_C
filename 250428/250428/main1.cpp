
#include <iostream>

void main() {

	/*
	int Number, Number1, ... ;
	배열 : 같은 타입의 변수 여러 개를 하나의 이름으로 선언하여 사용할 수 있게 해주는 문법
	사용방법 : 변수타입 배열명[개수];
	
	배열은 연속된 메모리 공간에 만들어지게 됨

	배열의 요소에 접근하는 방법 -> 인덱스 이용
	인덱스 : 번호 / 각 요소마다 번호가 부여되며 0 ~ 개수 - 1 까지의 번호 이용
	만약 저 범위의 인덱스가 아닌 값을 인덱스로 사용(배열 오버플로우)하게 되면 에러 및 버그 발생
	-> 에러가 안난다? 실제 사용 중인 인덱스의 값을 가져와서 그런 것

	메모리는 각 바이트마다 주소가 있음
	맨 처음인 0부터 순서대로 메모리를 사용하는 게 아니기 때문에 사용할 수 있는 메모리는 듬성듬성..
	따라서 통째로 사용할 수 있는 메모리는 한정되어 있음 -> 배열의 할당 최대치가 정해져있음
	배열의 할당 최대치는 2147483647 바이트
	int Array[2147483647];
	*/

	/*
	배열 선언시 = {}을 대입하면 모든 요소를 0으로 초기화
	{1, 2, 3, 4}로 초기화하면 0, 1, 2, 3, 4번 인덱스에는 1, 2, 3, 4가 들어가고
	나머지 모든 인덱스는 0으로 초기화 됨
	*/
	int Number[100] = {1, 2, 3, 4};
	
	Number[2] = 300;

	printf("%d\n", Number[3]);

	// for문을 통해 인덱스 하나하나에 접근하는 경우 다수
	for (int i = 0; i < 100; ++i) {
		Number[i] = i + 1;
	}

	for (int i = 0; i < 100; ++i) {
		printf("%d\n", Number[i]);
	}

	// int Tile[50];	-> 1차원 배열 // 둘 다 200Byte, 함수 등을 통한 값 전달엔 1차원 배열이 더 편함
	// int Tile[5][10];	-> 2차원 배열
	int Tile[5][10] = {};
	int Tile1[50] = {};
	for (int i = 0; i < 5; ++i) {
		for (int j = 0; j < 10; ++j) {
			Tile[i][j] = i * 10 + j;
			Tile1[i * 10 + j] = i * 10 + j;
		}
	}

}